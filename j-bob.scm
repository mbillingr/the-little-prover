
(defun J-Bob/step (defs e steps)
  (if (defs? '() defs)
      (if (expr? defs 'any e)
          (if (steps? defs steps)
              (rewrite/steps defs e steps)
              e)
          e)
      e))

(defun J-Bob/prove (defs pfs)
  TODO)

(defun J-Bob/define (defs pfs)
  (if (defs? '() defs)
      (if (proofs? defs pfs)
          (rewrite/define+ defs pfs)
          defs)
      defs))

(defun axioms ()
  '((dethm atom/cons (x y)
      (equal (atom (cons x y)) 'nil))
    (dethm car/cons (x y)
      (equal (car (cons x y)) x))))
    ; todo: the rest...

(defun prelude ()
  (J-Bob/define (axioms)
    '(((defun list-induction (x)
         (if (atom x)
             '()
             (cons (car x)
                   (list-induction (cdr x)))))
       (size x)
       ((A E) (size/cdr x))
       ((A) (if-same (atom x) 't))
       ((Q) (natp/size x))
       (() (if-true 't 'nil)))
      ((defun star-induction (x)
         (if (atom x)
             x
             (cons (star-induction (car x))
                   (star-induction (cdr x)))))
       (size x)
       ((A E A) (size/cdr x))
       ((A E Q) (size/car x))
       ((A E) (if-true 't 'nil))
       ((A) (if-same (atom x) 't))
       ((Q) (natp/size x))
       (() (if-true 't 'nil))))))
